\section{Gennemgang af process}
Dette afsnit handler om hvordan vi greb projektet an.

\begin{itemize}
\item \textbf{Første uge:}
Vi blev installeret på kontoret og vist rundt i huset, sådan at alle i huset vidste hvem vi var. Dette var med til at få os til at føle os velkomne.

Vi holdt et møde hvor vi som udviklere og EIK Bank hver især udtrykte ønsker og forventninger om projektforløbet. Det var her at grunden blev lagt til et ugentligt møde, hvor vi kunne fremlægge hvad vi havde lavet og hvad vi ville lave i den kommende uge.

Den første nød der skulle knækkes omhandlede kravet om at systemet skulle bygges op omkring en central database. Grunden til at dette er den første nød er at databasen vil komme til at danne grundlag for systemet. Problemet bestod i at undersøge hvilken database vi havde til vores rådighed, og hvordan tilgangen til den ville blive. Som man kan læse i afsnit \ref{Database} på side \pageref{Database}, så havde vi flere muligheder og valget faldt på en Access database som, i form af de fremtidige udvidelsesmuligheder, vil blive placeret på EIK Bank's fil server.

Det var også i forbindelse med denne nød at det gik op for os, hvor vigtigt det var at definere og præcisere vores nødder og mål i en sådan grad at vi, som udviklere, ikke var i tvivl om konsekvensen af ikke at nå et mål.

Derudover havde vi en session hvor vi kiggede en medarbejder over skulderen, for at finde ud af hvad deres nuværende arbejdsgang består af. Denne session fik vi lov til at videofilme og sammen med observation på noteform dannede det grundlag for dokumentationen af sessionen.

Det var endvidere i denne uge at vi fik konstrueret den første Lo-Fi prototype.

\begin{figure}
\centering
\includegraphics[width=1.00\textwidth]{Billeder/Prototype_Praecisering_Stills/Session1/PT1_KundeData2.jpg}
\caption{Prototype 1, KundeData}
\label{PT1_KundeData}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=1.00\textwidth]{Billeder/Prototype_Praecisering_Stills/Session1/PT1_IndtaegtForholdPopup.jpg}
\caption{Prototype 1, IntaegtForhold popup}
\label{PT1_IntaegtForholdPopup}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=1.00\textwidth]{Billeder/Prototype_Praecisering_Stills/Session1/PT1_IntaegtForhold2.jpg}
\caption{Prototype 1, IntaegtForhold}
\label{PT1_IntaegtForhold}
\end{figure}

\item \textbf{Anden uge:}
Vi afholdte to sessioner med den første prototype, hvor målet var at få indsamlet krav til systemet, se afsnit \ref{Kravliste} på side \pageref{Kravliste}. Sessionerne blev dokumenteret ved hjælp af video og notetagning. Ugen blev også brugt til at analysere de selvsamme krav, og så fik vi et crash kursus i pensionsteori. Denne uges hårde nød var at indsamle krav og at få en forståelse af EIK Banks verden. Derudover blev vi einge om at fredag fremover skulle være en dag hvor vi skrev rapport.


\item \textbf{Tredje uge:}
Vi konstruerede anden prototype og afholdte tredje prototype session. Foto fra sessionen kan ses på side \pageref{prototype2_KundeData}, \pageref{prototype2_FormueForhold_popup1} og \pageref{prototype2_FormueForhold_popup2} 
Til denne session valgte vi at gøre brug af lyd\-optagelser og noter. Det var også i denne uge at vi fandt ud af hvad vi skulle fokusere på i vores rapport. Det vil sige at vi valge to studieområder, brugevenlige brugergrænseflader og design patterns. 

\begin{figure}
	\centering
		\includegraphics[width=1.00\textwidth]{Billeder/Prototype_Praecisering_Stills/PT2_KundeData1.jpg}
	\caption{Prototype 2, KundeData}
	\label{prototype2_KundeData}
\end{figure}

\begin{figure}
	\centering
		\includegraphics[width=1.00\textwidth]{Billeder/Prototype_Praecisering_Stills/PT2_FormueForholdPopupAktiv1.jpg}
	\caption{Prototype 2, FormueForhold popup}
	\label{prototype2_FormueForhold_popup1}
\end{figure}

\begin{figure}
	\centering
		\includegraphics[width=1.00\textwidth]{Billeder/Prototype_Praecisering_Stills/PT2_FormueForholdPopupAktiv2.jpg}
	\caption{Prototype 2, FormueForhold popup 2}
	\label{prototype2_FormueForhold_popup2}
\end{figure}

\item \textbf{Fjerde uge:}
Denne uge omhandlede primært spørgsmål om design af det nye system. Vi identificerede klasser og lavede den overordnede arkitektur til systemet. Det udmyndigede sig i et klassediagram, hvilket kan ses i afsnit \ref{klassediagram} på side \pageref{klassediagram}. Vi fik lavet en testapplikation som gjorde brug af design patternet Model View Controller. Dette kan der læses mere om i afsnit \ref{design_pattern} på side \pageref{design_pattern}. Denne test var grundlaget for arkitekturen i systemet. Denne uges hårde nød gik ud på at få kodet en lille applikationen som kunne læse og skrive til en Access database. Denne applikation skulle derfor testes på en af EIK Banks computere og alt gik godt. Testen kan læses i afsnit \ref{Test af database tilgang} på side \pageref{Test af database tilgang}. Det var også i denne uge at lavede et strukturdokument der fortæller om navnekonventioner i koden.

\item \textbf{Femte uge:}
Ugen gik med med at programmere sidste uges fastlagte arkitektur. Vi diskuterede hvordan og hvorledes med performance og database. Diskutionen kan læses i afsnit \ref{databasePerformence} på side \pageref{databasePerformence}. Der var i denne uge ikke nogen nød, ud over det faktum, at der var kilometer vis af kode der skulle kodes og der naturligvis ikke var tid nok i døgnet.

\item \textbf{Sjette uge:}
Vi programmerede forsat på livet løs, men til forskel fra sidste uge fokuserede vi mere på at få koden til at virke sammen med de brugergrænseflader vi havde lavet. Det var også i denne uge at vi blev enige om at begynde at kode brugergrænsefladen til 'indtægter' og 'kunde' helt igennem, for så at kunne bruge den som skabelon for de resterende brugergrænseflader. På den måde kunne vi nøjes med at lave fejl ét sted og dermed få vigtige kodemæssige erfaringer, som så i fremtiden kunne bruges på de andre skærme. Den hårde nød gik igen fra sidste uge. 

På den ugentlige fredagsbriefing præsenterede vi EIK Bank for en afgrænsning, som gik ud på at udlade printfunktionaliteten i systemet. Det var EIK Bank ikke enige i og dermed blev vores plan ændret og vi fandt lige pludselig en ny hård nød.

\item \textbf{Syvende uge:}
Som reaktion på sidste uges fredagsmøde arrangerede vi et møde med EIK Bank hvor vi kvantificerede en del af kravene. Vi kom også igang med den hårdeste nød, det vil sige udprintning, fik undersøgt emnet på nettet og konsulteret en lærer på skolen. Vi fik til dels implementeret regler for brugergrænsefladen, på en sådan måde at brugeren ikke kan komme til at lave ulykker.

\item \textbf{Ottene uge:}
Vi arbejdede hårdt på at få knækket den hårdeste nød, udprintning. Se afsnit \ref{udprint} på side \pageref{udprint}. Den formatering, som vi var blevet enige med EIK Bank om, voldte os store problemer og vi blev internt i gruppen enige om at lave én printfunktion som virkede, frem for at lave noget halvfærdigt som ikke virkede. Det betyder at vi kun til dels har fået knækket nødden. Vi kan printe, men ikke helt som vi gerne skulle. Vi fik også finpudset de sidste ting i koden, lavet skærmene 'KundeData' og 'Indtaegt' færdige og vi fik skrevet kommentarer de steder hvor koden var færdig. Det var også i denne uge af vi lukkede for videreudvikling på systemet, for herefter at fokusere på rapport skrivning.

\item \textbf{Niende uge:}
Den hårdeste nød nu at skrive rapport og få den færdig. Vi fik også lavet en test session hvor vi ville se, om der var potentiale i vores system, angående kravet om hvor lang tid det må tage at indtaste kunde oplysninger. Vi fik afleveret en foreløbelig rapport til EIK Bank så de kunne læse den igennem og se at vi ikke har skrevet noget inkriminerende om EIK Bank.

\item \textbf{Tiende uge:}
Der var stadig en del der skulle skrives til rapporten og det blev gjort. Diagrammer, skærmbilleder og så videre blev gjort færdige og klar til at komme i rapporten. Nu da rapporten er færdig er den sidste hårde nød knækket.
\end{itemize}


\section{Eksempel på dokumentation}
EIK Bank har udtrykt ønske om at vi, i udviklingsperioden, fokuserer på funktionalitet i applikationen, fremfor dokumentation af systemet. For at give et eksempel på dokumentation af applikationens funktionalitet, har vi valgt at gennemgå hvordan vi opretter en indtægt, fra start til slut. Vi vil her vise relevante diagrammer, fra krav og usecase-, til klasse- og sekvensdiagrammer og demonstrere funktionens kald ned gennem arkitekturens lag. Dermed giver vi også et indblik i hvordan vores arkitektur hænger sammen.

Dokumentation er ikke helt uvæsentlig når der udvikles software til en bank. Når en bank vil tage et edbsystem i brug skal det godkendes af Finanstilsynet. Det betyder at banken skal dokumentere systemet efter gældende lovgivning.

Ud fra de fastlagte funktionelle krav om hvad applikationen skal kunne, ses det blandt andet at programmet skal kunne tilføje, se, slette og redigere en indtægt i et kundeforhold. Udførelsen af dette krav sker i forbindelse med indtastningen af kundens forhold. Kravet er fundet ved at se på hvilke kundeforhold der findes i EIK Banks nuværende system. Vi har til dette eksempel valgt at bruge del\-kravet 'tilføj indtægtsforhold', og som indtægtsforhold bruger vi aktieindkomst. Kravet står som nummer 20 på kravlisten og ud fra det kan vi definere følgende usecase, se figur \ref{fig:IndtaegtUsecase} på side \pageref{fig:IndtaegtUsecase}.

\begin{figure}
	\centering
		\includegraphics{Billeder/IndtaegtUsecase.jpg}
	\caption{Usecase Indtaegt}
	\label{fig:IndtaegtUsecase}
\end{figure}

Funktionen ligger i klassen 'Indtaegt' og er navngivet \textit{GemIndtaegt()}. Klassen 'Indtaegt' er abstrakt, hvilket betyder at man ikke kan instantiere klassen, vi instantierer subklasserne og ikke superklassen. Metoden \textit{GemIndtaegt()} er virtuel, hvilket betyder at de klasser der arver metoden, nemlig subklasserne, har mulighed for at overskrive funktionen. Se udsnittet af klassediagrammet, figur \ref{fig:ClassDiagramIndtaegt}, side \pageref{fig:ClassDiagramIndtaegt}.

Nedenstående arkitektur-diagram viser strukturen i applikationen, i forbindelse med 'Indtaegt', se figur \ref{fig:IndtaegtStruktur} på side \pageref{fig:IndtaegtStruktur}. Der gives derudover et eksempel fra appliktionenen på hvilken indflydelse design patternet MVC har på vores arkitektur og den opdeling det i praksis medfører. Der kan læses om MVC i afsnit \ref{MVC} på side \pageref{MVC}.

\newpage
\begin{figure}
	\centering
		\includegraphics[width=1.0\textwidth]{Billeder/IndtaegtStruktur.jpg}
	\caption{System arkitektur}
	\label{fig:IndtaegtStruktur}
\end{figure}

Følgende sekvensdiagram viser de specifikke kald i strukturen i forbindelse med at oprette en 'indtaegt', i dette tilfælde en 'aktieindkomst', se figur \ref{fig:IndtaegtSekvens} på side \pageref{fig:IndtaegtSekvens}. Af praktiske årsager, hvilket vil sige pladsmangel på siden, har vi valgt at springe visse kald over i diagrammet. Hele forløbet beskrives i nedenstående gennemgang, hvor 2 til og med 5 er udeladt fra sekvensdiagrammet:

\begin{enumerate}
\item Brugeren opretter en ny indtægt på formen 'Indtaegter' (view) i applikationen. Dette gøres ved at trykke på knappen 'Tilføj'.
\item Formen 'Indtaegter' sender en event videre til kontrol klassen 'IndtaegtKontrol'.
\item 'Indtaegtkontrol' kalder, via eventhandleren, funktionen \textit{session.get\-Kunde()} for at opklare hvilken kunde der er valgt på personlisten.
\item \textit{session.GetKunde()} kalder \textit{KundeKontainer.GetKunde()}, som returnerer kunde-objektet til 'IndtaegtsKontrol'.
\item Eventhandleren i 'IndtaegtKontrol' kalder nu \textit{Kunde.Gem\-Aktie\-Indkomst()} med udbytte og kursgevinst som parametre.
\item \textit{Kunde.GemAktieIndkomst()} kalder \textit{IndtaegtsKontanier.Gem\-Aktie\-Indkomst()}.
\item \textit{IndtaegtsKontainer.GemAktieIndkomst()} opretter nu en ny instans af 'AktieIndkomst', som får overført parametrene til dens konstruktør. 
\item Derefter kaldes \textit{GemIndtaegt()} på objektet 'AktieIndkomst'.
\item \textit{AktieIndkomst.GemIndtaegt()} starter med at kalde baseklassens \textit{GemIndtaegt()}.
\item \textit{Indtaegt.GemIndtaegt()} sørger for at lave plads i tabellen 'Indtaegter' i databasen.
\item Derefter opdaterer \textit{AktieIndkomst.GemIndtaegt()} den oprettede tupel i databasen, med de data der skal gemmes for aktieindkomsten,
\item Til slut opretter \textit{IndtaegtsKontainer.GemAktieIndkomst()} objektet i datastrukturen, ved at tilføje aktieindkomsten til den generiske liste af indtaegter.
\end{enumerate}

Ovenstående afspejler den algoritme vi har konstrueret til at gemme et kundeforhold. Algoritmen kan ses i 6 trin, på side \pageref{gem-algoritme} under afsnittet \ref{gem-algoritme}.

\newpage

\begin{figure}
	\centering
		\includegraphics[angle=270, width=0.90\textwidth]{Billeder/IndtaegtSekvens.jpg}
	\caption{Sekvensdiagram GemIndtaegt}
	\label{fig:IndtaegtSekvens}
\end{figure}


\newpage
Her viser vi et udsnit af koden som understøtter sekvensdiagrammet \ref{fig:IndtaegtSekvens} på side \pageref{fig:IndtaegtSekvens}.
\lstset{language=[Sharp]C, % fortæller hvilket sprog koden er skrevet i.
  basicstyle=\small, breaklines=true}
\begin{lstlisting}
public partial class Indtaegter : Form
{
  private void btnIndtaegterTilfoej_Click(object sender, EventArgs e)
  {
    indtaegtKontrol.getEvent(sender);
    set_false();
  }
}

//Følgende er et resultat af at en bruger har trykket på knappen tilføj på popup formen til 'Indtaegter'

public class IndtaegtKontrol
{
  private System.Windows.Forms.Button SenderBtn = null;
  
  private Indtaegtsforhold indtaegtForm;
  private Indtaegter indtaegtPopUpForm;
  private Session session;
  private Indtaegt.Indtaegt indtaegt;

  public void getEvent(object sender)
  {
    if (sender.GetType().Name == "Button")
    {
      //Her typecastes objektet 'sender' til typen 'Button'
      SenderBtn = (System.Windows.Forms.Button)sender;

      if (sender.GetType().Name == "Button")
      {
        SenderBtn = (System.Windows.Forms.Button)sender;
        if (SenderBtn.Name == "btnIndtaegterTilfoej" && SenderBtn.Text == "Tilføj")
          {
          Kunde kunde = null;

          if (indtaegtForm.rdoPerson1.Checked)
          {
            kunde = session.GetKunde(0);
          }
          else if (indtaegtForm.rdoPerson2.Checked)
          {
            kunde = session.GetKunde(1);
          }
          indtaegtPopUpForm.Refresh();

          //Her springer vi lidt i funktionen for kun at vise det, for eksemplet, relevante kode. Det vil sige uvedkommende forgreninger er undladt.

          else if (indtaegtPopUpForm.rdoAktieIndkomst.Checked)
          {
            try
            {
              int udbytte = Convert.ToInt32(indtaegtPopUpForm.txtUdbytte.Text);
              int kursgevinst = Convert.ToInt32(indtaegtPopUpForm.txtKursGevinstTab.Text);
              kunde.GemAktieIndkomst(udbytte, kursgevinst);
            }
            catch (FormatException fe)
            {
              Console.WriteLine("IndtaegtKontrol.btnTilfoej : " + fe.Message);
            }
          }
          indtaegtForm.OpdaterTrae(kunde);
        }
      }
    }
  }
}

//Følgende er et resultat af IndtaegtKontrol.kunde.GemAktieIndkomst(udbytte, kursgevinst);

public class Kunde
{
  private IndtaegtsKontainer indtaegter;
  
  public void GemAktieIndkomst(int udbytte_, int kursgevinst_)
  {
    indtaegter.GemAktieIndkomst(udbytte_, kursgevinst_);
  }
}

//Følgende er et resultat af Kunde.indtaegter.GemAktieIndkomst(udbytte_, kursgevinst_);

public class IndtaegtsKontainer
{
  private List<Indtaegt> indtaegter;

  public void GemAktieIndkomst(int udbytte_, int kursgevinst_)
  {
    AktieIndkomst a = new AktieIndkomst(0, kundeID, 0, udbytte_, kursgevinst_);
    a.GemIndtaegt();
    indtaegter.Add(a);
  }
}                

//Følgende er et resultat af kaldet IndtaegtsKontainer.a.GemIndtaegt();

public class AktieIndkomst : Indtaegt
{
  private int aktieIndkomstID;
  private int udbytte;
  private int kursGevinst;
 
  public override void GemIndtaegt()
  {
    ///Tilføjer en entry i tabellen Indtaegt
    base.GemIndtaegt();
    ///Tilføjer aktieindkomsten til tabellen aktieindkomst, med relation til 
    ///den indtaegt der blev tilføjet ovenfor
    string sql = "INSERT INTO aktieindkomst (indtaegtid, udbytte, kursgevinst) values (" + base.IndtaegtID + "," + udbytte + "," + kursGevinst + ")";
    DBAccess.getDBInstance().ExecuteNonQuery(sql);

    ///Henter det pågældende indtaegtid
    sql = "SELECT aktieindkomstid FROM aktieindkomst WHERE indtaegtid=" + base.IndtaegtID;
    DataSet myDataSet = DBAccess.getDBInstance().ExecuteQuery(sql);

    try
    {
      aktieIndkomstID = Convert.ToInt32(myDataSet.Tables["Result"].Rows[0][0].ToString());
    }
    catch (NullReferenceException nre)
    {
      Console.WriteLine("AktieIndkomst.GemIndtaegt 2 : " + nre.Message);
    }
  }
}

//Følgende er et resultat af kaldet AktieIndkomst.base.GemIndtaegt();

public abstract class Indtaegt
{
  private int indtaegtID;
  private int kundeID;
        
  public virtual void GemIndtaegt()
  {
    ///Finder den tupel i tabellen indtaegt der er klar til brug (den med det højeste id)
    string sql = "SELECT indtaegtid, kunde.kundeid FROM indtaegt inner join kunde on indtaegt.kundeid = kunde.kundeid WHERE navn='Default'";
    DataSet myDataSet = DBAccess.getDBInstance().ExecuteQuery(sql);
    int emptyIndtaegtID = 0;
    int defaultKundeID = 0;
    try
    {
      emptyIndtaegtID = Convert.ToInt32(myDataSet.Tables["Result"].Rows[0][0].ToString());
      defaultKundeID = Convert.ToInt32(myDataSet.Tables["Result"].Rows[0][1].ToString());
    }
    catch (NullReferenceException nre)
    {
      Console.WriteLine("Indtaegt.GemIndtaegt 1 : " + nre.Message);
    }

    ///Indsætter en ny tom tupel i indtaegt (id+1).
    sql = "INSERT INTO indtaegt (kundeid) VALUES (" + defaultKundeID + ")";
    DBAccess.getDBInstance().ExecuteNonQuery(sql);

    ///Opdaterer den (tomme) hentede tupel med det tilhørende kundeID.
    sql = "UPDATE indtaegt SET kundeid=" + KundeID + " WHERE indtaegtid=" + emptyIndtaegtID;
    DBAccess.getDBInstance().ExecuteNonQuery(sql);
    this.IndtaegtID = emptyIndtaegtID;
  }
}

//Følgende er et resultat af kaldet IndtaegtKontrol.indtaegtForm.OpdaterTrae(kunde);

public partial class Indtaegtsforhold : Form
{
  private IndtaegtKontrol indtaegtKontrol;
  private Session session;
        
  public void OpdaterTrae(Kunde k)
  {
    List<Indtaegt.Indtaegt> indtaegtListe = k.getIndtaegtKontainer().GetIndtageter();
            
    treeIndtaegter.Nodes.Clear();

    foreach (EIKBank.Indtaegt.Indtaegt i in indtaegtListe)
    {
      if (treeIndtaegter.Nodes.Count == 0)
      {
        TreeNode gren = new TreeNode(k.getIndtaegtKontainer().GetSumAfIndtaegt(i));
        treeIndtaegter.Nodes.Add(gren);
        TreeNode blad = new TreeNode(i.Praesenter());
        gren.Nodes.Add(blad);
      }
      else
      {
        bool found = false;
        foreach (TreeNode n in treeIndtaegter.Nodes)
        {
          if (n.Text.Equals(k.getIndtaegtKontainer().GetSumAfIndtaegt(i)))
          {
            found = true;
            TreeNode blad = new TreeNode(i.Praesenter());
            n.Nodes.Add(blad);
          break;
          }
        }
        if (found == false)
        {
          TreeNode gren = new TreeNode(k.getIndtaegtKontainer().GetSumAfIndtaegt(i));
          treeIndtaegter.Nodes.Add(gren);
          TreeNode blad1 = new TreeNode(i.Praesenter());
          gren.Nodes.Add(blad1);
        }
      }
    }
  }
}
\end{lstlisting}

